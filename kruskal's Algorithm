#include <iostream>
#include <algorithm>
using namespace std;
class edge
{
    public:
    int source;
    int destination;
    int weight;
    };
bool compare(edge e1,edge e2)
{
    return e1.weight<e2.weight;
}
int findparent(int source,int *parent)
{
    if(parent[source]==source)
    {
        return source;
    }
    return findparent(parent[source], parent);
}
void getmst(edge * input,int V,int E)
{
    sort(input,input+E,compare);
    int * parent=new int[V];
    for(int i=0;i<V;i++)
    {
        parent[i]=i;
    }
    edge*output=new edge[V-1];
    int count=0;
    int i=0;
    while(count!=V-1 && i<E)
    {
        edge currentedge=input[i];
        int sourceparent=findparent(currentedge.source,parent);
        int destinationparent=findparent(currentedge.destination,parent);
        if(sourceparent!=destinationparent)
        {
            output[count]=currentedge;
            count++;
            parent[sourceparent]=destinationparent;
        }
        i++;
    }
    for (int i = 0; i < V - 1; i++) {
      //cout << output[i].source << " " <<c
      if(output[i].source<output[i].destination)
      {
          cout<<output[i].source<<" "<<output[i].destination<<" "<<output[i].weight;
          cout<<endl;
      }
      else{
          cout<<output[i].destination<<" "<<output[i].source<<" "<<output[i].weight;
          cout<<endl;
      }
    }
}

int main() {
    // Write your code here
    int V,E;
    cin>>V>>E;
    edge * input=new edge[E];
    for(int i=0;i<E;i++)
    {
        int source,destination,weight;
        cin>>source>>destination>>weight;
        //edge* newedge=new edge(source,destination,weight);
        input[i].source=source;
        input[i].destination=destination;
        input[i].weight=weight;
    }
    getmst(input,V,E);
    return 0;
}
